#!/usr/bin/env python3

import sys, yaml, gitlab, argparse, pprint, time, dateutil.parser, termcolor

# Gracefully degrading icecream import https://github.com/gruns/icecream?tab=readme-ov-file#import-tricks
try:
    from icecream import ic
    ic.configureOutput(includeContext=True, argToStringFunction = lambda *args: pprint.pformat(*args, width=1000))
except ImportError:
    ic = lambda *a: None if not a else (a[0] if len(a) == 1 else a)

parser = argparse.ArgumentParser(description='cicdtail - tail progress on CI/CD pipelines')
parser.add_argument('-v', '--verbose', '--debug', action='store_true', help='Verbose/Debug output')
parser.add_argument('cfg', metavar='cfg.yml', help='configuration file')
args = parser.parse_args()

if args.verbose is not True:
    try:
        ic.disable()
    except:
        pass

ic('Load config from file')
try:
    with open(args.cfg, 'r') as cffile:
        configuration = yaml.safe_load(cffile)
        cffile.close()
except Exception as e:
    print(f"Failed to open configuration file:\n{e}")
    sys.exit(255)

print(f"Loaded configuration from: {args.cfg}")
ic('Top level configuration keys:', configuration.keys())

gitlab_handle = {}
for name, conf in configuration.items():
    print(f"Processing configuration section: {name}")
    ic(name, conf)
    if conf['type'] == 'gitlab':
        gitlab_handle[name] = gitlab.Gitlab(conf['url'], private_token=conf['token'])

gitlab_watched = set()
out_seen = set()
primed = False # Don't print initial batch of jobs
while True:
    for name, handle in gitlab_handle.items():
        try:
            handle.auth()
        except Exception as e:
            print(f"Failed to authenticate to gitlab {name}: {e}")

        # https://docs.gitlab.com/ee/api/members.html#roles
        for project in handle.projects.list(min_access_level=30, get_all=True):
            if project not in gitlab_watched:
                ic(gitlab_watched.add(project))
                print(f"Watching project {project.path_with_namespace} on {name}.")

        for project in gitlab_watched:
            projectname = project.path
            for job in sorted(project.jobs.list(), key=lambda job: job.id):
                jobname = job.name
                status = job.status
                ref = job.ref
                title = job.commit['title']
                commit = job.commit['short_id']
                # Pick timestamp furthest along the process
                if job.finished_at is not None:
                    timestamp = ic(dateutil.parser.parse(job.finished_at))
                elif job.started_at is not None:
                    timestamp = ic(dateutil.parser.parse(job.started_at))
                else:
                    timestamp = ic(dateutil.parser.parse(job.created_at))
                out = f"{timestamp.strftime('%d.%m.%Y %H:%M:%S')} {projectname}@{ref} {commit}: \"{title}\" {status}: {jobname}"
                if(out not in out_seen) and primed is True:
                    if status == 'success':
                        print(termcolor.colored(out, 'green'))
                    elif status == 'failed':
                        print(termcolor.colored(out, 'red'))
                    else:
                        print(out)
                out_seen.add(out)
    if primed is not True:
        print(f"Waiting for new status updates.")
        primed = True
    for i in [ '█', '▇', '▆', '▅', '▄', '▃', '▂', '▁' ]:
        print(f"{i}\b", end='', flush=True)
        time.sleep(0.5)
